// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TorrentState {
  Queued
  Verifying
  Error
  Downloading
  Paused
  Finished

  @@map("torrent_state")
}

model Torrent {
  infoHash            String              @unique @map("info_hash")
  name                String?
  size                BigInt
  state               TorrentState
  progress            Float
  magnetUri           String?             @map("magnet_uri")
  torrentFile         Bytes?              @map("torrent_file")
  errorMessage        String?             @map("error_message")
  createdAt           DateTime            @default(now()) @map("created_at")
  torrentClientState1 TorrentClientState? @relation("criticalTorrent")
  files               TorrentFile[]       @relation("torrent")

  @@map("torrent")
}

enum TorrentFileState {
  Progress
  Finished
}

model TorrentFile {
  id        Int              @id @default(autoincrement())
  path      String           @unique
  torrentId String           @map("torrent_id")
  state     TorrentFileState
  size      BigInt
  progress  Float
  torrent   Torrent          @relation("torrent", fields: [torrentId], references: [infoHash], onDelete: Cascade)

  @@map("torrent_file")
}

model TorrentClientState {
  id                 String   @unique
  paused             Boolean
  criticalTorrentId  String?  @unique @map("critical_torrent_id")
  downloadSpeedLimit Float?   @map("download_speed_limit")
  uploadSpeedLimit   Float?   @map("upload_speed_limit")
  criticalTorrent    Torrent? @relation("criticalTorrent", fields: [criticalTorrentId], references: [infoHash], onDelete: SetNull)

  @@map("torrent_client_state")
}

enum TelegramUserState {
  First
  Waiting

  // Scenarios manager
  AddScenarioSetName
  EditScenarioName
  AddScenarioStepSetName
  AddScenarioStepSetType
  AddScenarioStepSetScenario
  AddScenarioStepSetDevice
  AddScenarioStepSetWaitPeriod
  AddScenarioTriggerSetName
  AddScenarioTriggerSetType
  AddScenarioTriggerSetDevice
  AddScenarioTriggerSetTelegramCommand

  // Devices client
  AddDeviceSetName
  AddDeviceSetType
  AddDeviceSetManufacturer
  AddDeviceSetMac
  AddDeviceSetAddress
  AddDeviceSetUsedForAtHomeDetection
  AddDeviceEnterMatterPairingCode
  EditDeviceName
  EditDeviceMac
  EditDeviceAddress

  // Torrent client
  SearchRutracker
  AddTorrent
  SetDownloadLimit
  SetUploadLimit

  @@map("telegram_user_state")
}

model TelegramUserData {
  telegramUserId            Int               @unique() @map("telegram_user_id")
  state                     TelegramUserState
  editScenarioPayload       Json?             @map("edit_scenario_payload")
  addScenarioStepPayload    Json?             @map("add_scenario_step_payload")
  addScenarioTriggerPayload Json?             @map("add_scenario_trigger_payload")
  addDevicePayload          Json?             @map("add_device_payload")
  editDevicePayload         Json?             @map("edit_device_payload")

  @@map("telegram_user_data")
}

model TelegramCallbackData {
  dataId    String   @unique @map("data_id")
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
}

enum DeviceType {
  Tv
  Lightbulb
  Socket
  Other
  Unknown

  @@map("device_type")
}

enum DeviceManufacturer {
  Haier
  Yeelight
  Yandex
  Other
  Unknown

  @@map("device_manufacturer")
}

model Device {
  id                     Int                @id @default(autoincrement())
  name                   String             @unique
  type                   DeviceType
  mac                    String?            @unique
  address                String?            @unique
  manufacturer           DeviceManufacturer @default(Other)
  matterNodeId           String?
  usedForAtHomeDetection Boolean            @default(false)
  createdAt              DateTime           @default(now()) @map("created_at")

  @@map("device")
}

enum ScenarioConditionType {
  // Misc
  Time

  // Home
  EmptyHome
  NonEmptyHome
  DeviceOnline
  DeviceOffline
  DevicePowerOn
  DevicePowerOff
}

enum LogicalOperator {
  And
  Or
}

model ScenarioStepCondition {
  id          Int                   @id @default(autoincrement())
  name        String
  description String                @default("")
  stepId      Int                   @map("step_id")
  isActive    Boolean               @map("is_active")
  type        ScenarioConditionType
  payload     Json
  createdAt   DateTime              @default(now()) @map("created_at")
  step        ScenarioStep          @relation("step", fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, name])
  @@map("scenario_step_condition")
}

enum ScenarioStepType {
  // Misc
  RunScenario
  Wait

  // Devices
  TurnOnDevice
  TurnOffDevice
  ToggleDevice

  @@map("scenario_step_type")
}

model ScenarioStep {
  id                 Int                     @id @default(autoincrement())
  name               String
  description        String                  @default("")
  scenarioId         Int                     @map("scenario_id")
  position           Int
  isActive           Boolean                 @map("is_active")
  type               ScenarioStepType
  payload            Json
  conditionsOperator LogicalOperator         @default(And)
  createdAt          DateTime                @default(now()) @map("created_at")
  scenario           Scenario                @relation("scenario", fields: [scenarioId], references: [id], onDelete: Cascade)
  conditions         ScenarioStepCondition[] @relation("step")

  @@unique([scenarioId, name])
  @@map("scenario_step")
}

enum ScenarioTriggerType {
  // Misc
  Schedule

  // Home
  EmptyHome
  NonEmptyHome
  DeviceOnline
  DeviceOffline
  DevicePowerOn
  DevicePowerOff

  // Telegram
  TelegramCommand
}

model ScenarioTrigger {
  id          Int                 @id @default(autoincrement())
  name        String
  description String              @default("")
  scenarioId  Int                 @map("scenario_id")
  isActive    Boolean             @map("is_active")
  type        ScenarioTriggerType
  payload     Json
  createdAt   DateTime            @default(now()) @map("created_at")
  scenario    Scenario            @relation("scenario", fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([scenarioId, name])
  @@map("scenario_trigger")
}

model ScenarioCondition {
  id          Int                   @id @default(autoincrement())
  name        String
  description String                @default("")
  scenarioId  Int                   @map("scenario_id")
  isActive    Boolean               @map("is_active")
  payload     Json
  type        ScenarioConditionType
  createdAt   DateTime              @default(now()) @map("created_at")
  scenario    Scenario              @relation("scenario", fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([scenarioId, name])
  @@map("scenario_condition")
}

model Scenario {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  description        String              @default("")
  isActive           Boolean             @map("is_active")
  conditionsOperator LogicalOperator     @default(And)
  createdAt          DateTime            @default(now()) @map("created_at")
  steps              ScenarioStep[]      @relation("scenario")
  triggers           ScenarioTrigger[]   @relation("scenario")
  conditions         ScenarioCondition[] @relation("scenario")

  @@map("scenario")
}
